{"version":3,"sources":["scripts/main.js"],"names":["splitByWords","input","position","indexOf","filter","ch","toUpperCase","slice","firstWord","firstChToUpperCase","inputs","document","querySelectorAll","map","label","createElement","setAttribute","id","innerText","name","parentElement","insertAdjacentElement"],"mappings":";AAAA,aAwBA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAtBA,IAAMA,EAAe,SAAAC,GACbC,IAAAA,EAAWD,EACdE,QAAQ,EACJF,GACFG,OAAO,SAAAC,GACNA,OAAAA,GAAM,KAAOA,GAAM,MAAK,IAE1BH,IAAc,IAAdA,EACKD,OAAAA,EAAM,GAAGK,cAAgBL,EAAMM,MAAM,GAGxCC,IAAAA,EAAYP,EAAMM,MAAM,EAAGL,GAG1BO,OAFoBD,EAAU,GAAGF,cAAgBE,EAAUD,MAAM,GAGlE,IACAN,EAAMM,MAAML,IAGdQ,EAASC,SACZC,iBAAiB,SAEpB,EACKF,GACFG,IAAI,SAAAZ,GACGa,IAAAA,EAAQH,SAASI,cAAc,SAErCD,EAAME,aAAa,QAAS,eAC5BF,EAAME,aAAa,MAAOf,EAAMgB,IAChCH,EAAMI,UAAYlB,EAAaC,EAAMkB,MAErClB,EACGmB,cACAC,sBAAsB,aAAcP,GAEvCb,EACGe,aAAa,cAAehB,EAAaC,EAAMkB","file":"main.993ce2f9.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst splitByWords = input => {\n  const position = input\n    .indexOf([\n      ...input]\n      .filter(ch =>\n        ch >= 'A' && ch <= 'Z')[0]);\n\n  if (position === -1) {\n    return input[0].toUpperCase() + input.slice(1);\n  }\n\n  const firstWord = input.slice(0, position);\n  const firstChToUpperCase = firstWord[0].toUpperCase() + firstWord.slice(1);\n\n  return firstChToUpperCase\n      + ' '\n      + input.slice(position);\n};\n\nconst inputs = document\n  .querySelectorAll('input');\n\n[\n  ...inputs]\n  .map(input => {\n    const label = document.createElement('label');\n\n    label.setAttribute('class', 'field-label');\n    label.setAttribute('for', input.id);\n    label.innerText = splitByWords(input.name);\n\n    input\n      .parentElement\n      .insertAdjacentElement('afterbegin', label);\n\n    input\n      .setAttribute('placeholder', splitByWords(input.name));\n  });\n"]}